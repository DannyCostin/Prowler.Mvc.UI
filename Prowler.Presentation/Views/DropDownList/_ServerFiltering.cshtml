@using Prowler.Mvc.UI
@using Prowler.Presentation.Models
@model Prowler.Presentation.Models.MockProduct

<h3>Server Filtering</h3>
<h5>The demo shows a sample scenario for using the DropDownList for ASP.NET MVC where you can bind the component to a list of values and make a selection from the available options.</h5>

<br />

<h5>DEMO EXAMPLE</h5>
<div style="padding-top:10px">
    @(Html.Prowler().DropDownList()
          .BindTo(Model.ProductDataSource)
          .DataTextField(nameof(Product.Name))
          .DataValueField(nameof(Product.Id))
          .HtmlAttributes("style", "width:400px")
          .HtmlAttributes("id", "serverFilter")
          .GroupBy(nameof(Product.GroupId), nameof(Product.GroupName))
          .ServerFiltering(@"/DropDownList/Search", "value")
          .SelectedIndex(0)
          .Event(EventDropDown.Open, "openEvent")
          .Render()

    )
    <br />

    <script>function openEvent() {
            var data = { customFilter: 'customValue' };
            prowlerDropDown('serverFilter').serverFilterParameterAdd(data);
        }</script>

    @{
        string serverFiltering = @"@(Html.Prowler()
.BindTo(Model.ProductDataSource)
.DataTextField(nameof(Product.Name))
.DataValueField(nameof(Product.Id))
.HtmlAttributes(""style"", ""width: 400px"")
.HtmlAttributes(""id"", ""serverFilter"")
.GroupBy(nameof(Product.GroupId), nameof(Product.GroupName))
.ServerFiltering(@""/DropDownList/Search"", ""value"")
.SelectedIndex(0)
.Event(EventDropDown.Open, ""openEvent"")
.Render()";

        string serverFilteringJS = @"<script>
function openEvent() {
    var data = { customFilter: 'customValue' };
    prowlerDropDown('serverFilter').serverFilterParameterAdd(data);
}
</script>";

string serverFilteringCT = @"public JsonResult Search(string value, string customFilter)
{
    Thread.Sleep(3000); // simulate server response delay :)

    value = value?.ToLower() ?? string.Empty;
    var model = MockHelper.GetMockProducts();
    model.ProductDataSource = model.ProductDataSource.Where(i => i.Name.ToLower().Contains(value)).ToList();

    return Json(model.ProductDataSource);
}
";

    }
    <br />
    <h5>VIEW CODE</h5>
    <div style="background-color:whitesmoke;padding:20px; margin-top:10px; border-radius:5px">
        <code style="white-space:pre; display:block; margin:10px">@serverFiltering</code>
    </div>

    <br />
    <h5>JAVASCRIPT CODE</h5>
    <div style="background-color:whitesmoke;padding:20px; margin-top:10px; border-radius:5px">
        <code style="white-space:pre; display:block; margin:10px">@serverFilteringJS</code>
    </div>

    <br />
    <h5>CONTROLLER CODE</h5>
    <div style="background-color:whitesmoke;padding:20px; margin-top:10px; border-radius:5px">
        <code style="white-space:pre; display:block; margin:10px">@serverFilteringCT</code>
    </div>

    <h5><strong>ServerFiltering</strong> method has an url and a name paramater, set the name parameter value to match the controller method parameter. It is also posible to send aditional information to the server by using the API method <strong>serverFilterParameterAdd</strong> as showed in the example</h5>
</div>